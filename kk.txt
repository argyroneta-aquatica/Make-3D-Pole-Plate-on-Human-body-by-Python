# -*- coding: utf-8 -*-
"""
Created on Mon Aug  3 11:14:30 2020

@author: 용하
"""

#------------모듈-------------------------------------------+
import numpy as np
from scipy import interpolate
from matplotlib import pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

##-----------패러미터--------------------------------------------------+
s=0.1 #폐곡선 표면부터 극판까지의 거리 
d=0.1 #극판 두께
a=0.5 #극판의 반지름 
div=400 #옆면을 나눈 수
div_z=300 #축을 나눈 수 
#-------------폐곡면-----------------------------------------+
x = np.array([9.5, 13, 14, 12.5, 10])
y = np.array([12, 10, 14.5, 14, 12])

# x 와 x[0] array 를 합치는 것(처음이랑 끝을 이어서 폐곡선 만든 것) 
x = np.r_[x, x[0]]
y = np.r_[y, y[0]]

# x,y 사이사이 값에 추가 적인 값을 넣어, 스무스한 곡선을 만드는 것 
tck, u = interpolate.splprep([x, y], s=0, per=True)
# per=1 이면 폐곡선으로 인터폴 레이션 한다

# 스무스한 곡선에서 1000의 점 빼기 
xi, yi = interpolate.splev(np.linspace(0, 1, div), tck)

#z축 추가 및, 메쉬를 짜기위한 xi, yi 변형
zi = np.linspace(0, 6, div_z)
z_grid=[]
for i in range(len(zi)):
    z_list=[zi[i]]
    z_grid.append(z_list)
z_grid_1=np.array(z_grid)
x_list=[xi]
x_grid=x_list*len(zi)
x_grid_1=np.array(x_grid)
y_list=[yi]
y_grid=y_list*len(zi)
y_grid_1=np.array(y_grid)
#------------폐곡선 라인 벡터 만들기 (반시계 방향)--------------------+
vector_1=[]
for i in range(len(xi)):
    vector_1.append([xi[i],yi[i]])
l=np.array(vector_1)
cur_v=[]
for i in range(len(l)):
    if i<div-1:
        cur_v.append(l[i+1]-l[i])
    
    else:
        cur_v.append(l[0]-l[i])
#---------폐곡면 그래프 그리기-----------------------------------+
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.set_xlabel("X")
ax.set_ylabel("Y")
ax.set_zlabel("Z")
plt.xlim(9,15)
plt.ylim(9,15)
ax.set_zlim(0,6)
ax.plot_surface(x_grid_1, y_grid_1, z_grid_1, color='aqua' ,alpha=0.2)

#------------좌표추출-------------------------------------------+
def cor(p):
    if p.count('x')>=1:           
            s=p.split(',')
            b=[]
            for i in range(len(s)):
                b.append(s[i].strip())
            c=[]
            for i in range(len(b)):
                c.append(b[i][2:])
            print(c)
            cx=float(c[0])
            cy=float(c[1])
            cz=float(c[2])
            i,j=distance(cx,cy,cz)
            kx=xi[j]
            ky=yi[j]
            kz=zi[i]
            return kx,ky,kz
    else :
            s=p.split(',')
            b=[]
            for i in range(len(s)):
                b.append(s[i].rstrip('ged '))
            d=[]
            d.insert(0,b[0][8:])
            d.insert(1,b[1][11:])
            print(d)

#-------------거리가까운 메시의 좌표특정을 위한 거 ---------------------+
def distance(x,y,z):
    d_1=[]
    for i in range(len(zi)):
        c=abs(z-zi[i])
        d_1.append(c)
    e_1=d_1.index(min(d_1))
    d_2=[]
    for i in range(len(xi)):
        c=(x-xi[i])**2+(y-yi[i])**2
        d_2.append(c)
    e_2=d_2.index(min(d_2))
    return e_1, e_2    
'''리턴값을 e로해서, 좌표자체를 특정하는게 아니라 좌표가 리스트에서 존재하는 
위치를 특정하는거임 여기서 e_1은 z의 좌표 e_2 x,y 의 좌표 '''

#-----------접선그리기--------------------------------------------+
def tan(x,y,z):
    j, k=distance(x,y,z)
    if 0 < k <div-1:
        m1=(yi[k+1]-yi[k])/(xi[k+1]-xi[k])
        m2=(yi[k]-yi[k-1])/(xi[k]-xi[k-1])
        m=(m1+m2)/2
        return m
    elif k == 0 :
        m1=(yi[1]-yi[0])/(xi[1]-xi[0])
        m2=(yi[-1]-yi[-2])/(xi[-1]-xi[-2])
        m=(2*m1 + m2)/3
        return m
    elif k == div-1 : #마지막 점의 경우 k+1 번째가 없기에 에러가 난다. 때문에 써준거 
        m1=(yi[1]-yi[0])/(xi[1]-xi[0])
        m2=(yi[-1]-yi[-2])/(xi[-1]-xi[-2])
        m=(m1 + 2*m2)/3
        return m 

def line_1(m,x,y,z,b,color):
    ''' m 은 기울기, b 는 중심점부터 끝 까지의 길이
    좌우 끝점의 좌표를 리턴한다'''
    x_1=x-(b)*(1+m**2)**-0.5
    x_2=x+(b)*(1+m**2)**-0.5
    y_1= line(m,x_1,x,y)
    y_2= line(m,x_2,x,y)
    plt.plot([x_1,x_2],[y_1,y_2],[z,z], color)
    return x_1, y_1, z, x_2, y_2,z 
#------------라인 함수--------------------------------------------+ 
def line(m,x, xt, yt):
    return m*(x-xt)+yt   

#-----------노말벡터 그리기-----------------------------------+
def normal(m,lx,ly,z):
    ''' 아래판 좌표와 노말 벡터의 기울기를 입력하면 폐곡선 위의 좌표를 찾아서 출력 '''
    ex_l=[] #l(폐곡선 좌표)에서 선별된 친구들 
    d=[]
    f=[] #폐곡선 위의 점중에서, 엡실론 보다 작은 거리에 있는 친구들 
    h=[]
    for i in range(len(l)):
        v_1=np.array([lx-l[i][0],ly-l[i][1],0])
        v_2=np.array([cur_v[i][0],cur_v[i][1],0])
        cross=np.cross(v_1,v_2)
        if cross[2] > 0: #법선 벡터랑 폐곡선 벡터랑 양수인 값만 뽑아낸다 
            ex_l.append([l[i][0],l[i][1]])
   
    for i in range(len(ex_l)):
        x=ex_l[i][0]
        y=ex_l[i][1]
        c=abs((y-ly-m*(x-lx))*(m**2 + 1)**-0.5)
        d.append(c)
        epsilon=0.01
        if c < epsilon:
            f.append([x,y])
    if len(f) > 0 : 
        for i in f :
            d_1=(i[0]-lx)**2+(i[1]-ly)**2 #엡실론 내부의 좌표로부터 lx,ly 까지의 거리 
            h.append(d_1)
        k=h.index(min(h))
        return f[k][0], f[k][1],z
            
    else : #엡실론 내부에 해당하는 좌표가 없는경우에는 그냥 최소거리 출력 
        k=d.index(min(d))
        return ex_l[k][0], ex_l[k][1],z 


#---------------2차원 극판-----------------------------------------+
def pan(x, y, z, s, d, r):
    '''x,y 는 폐곡선 위의 찍은 점의 좌표, s는 찍은 점부터 극판 까지의 거리
    d 는 극판 두께, r은 극판 반지름 '''
    us=d + s # 점부터 극판 위쪽까지의 거리
    m=tan(x,y)
    x_1, y_1 =sam_dis(s,x,y)
    x_2, y_2 =sam_dis(us,x,y)
    lx_1, ly_1, lx_2, ly_2 = line_1(m,x_1,y_1,r,'r') #아래판의 좌우 끝 좌표 
    ux_1, uy_1, ux_2, uy_2 = line_1(m,x_2,y_2,r,'r')  #위 판의 좌우 끝 좌표
    plt.plot([lx_1,ux_1],[ly_1,uy_1],'r')
    plt.plot([lx_2,ux_2],[ly_2,uy_2],'r') #판끼리 연결함 
    tx_1,ty_1=normal(-1/m,lx_1,ly_1)
    tx_2,ty_2=normal(-1/m,lx_2,ly_2)
    plt.plot([lx_1,tx_1],[ly_1,ty_1],'black')
    plt.plot([lx_2,tx_2],[ly_2,ty_2],'black')
    
#---------------곡선 길이로, 해당 좌표 구하는 함수------------------------------------+
def curv(x,y,z,r):
    length_r=0
    length_l=0
    i_1, i=distance(x,y,z)
    j_1, j=distance(x,y,z)
    
    while length_r < r: # 길이 r 만큼 오른쪽으로 떨어진 곳의 좌표  
        if i < div-1:
            length_r+=((tan(xi[i],yi[i],z)**2 + 1)**0.5)*abs((xi[i+1]-xi[i]))
            i+=1
        else : 
            length_r+=((tan(xi[i],yi[i],z)**2 + 1)**0.5)*abs((xi[0]-xi[i]))
            i=0
    
    while length_l < r: # 길이 r 만큼 왼쪽으로 떨어진 곳의 좌표 
        if j > 0:
            length_l+=((tan(xi[j],yi[j],z)**2 + 1)**0.5)*abs((xi[j]-xi[j-1]))
            j-=1
        else : 
            length_l+=((tan(xi[j],yi[j],z)**2 + 1)**0.5)*abs((xi[j]-xi[div-1]))
            j=div-1
    
    return i,j


#-------------폐곡선 위에서 노말벡터만큼 떨어진 점 좌표 구하기-----------+
def sam_dis(a,x,y,z):
    m=tan(x,y,z)
    x_1=x+(a*m*(m**2 + 1)**-0.5) #x,y 로 부터 기울기 -1/m 이고 a만큼 거리가 떨어진 점
    x_2=x-(a*m*(m**2 + 1)**-0.5)
    y_1=line(-1/m,x_1,x,y)
    y_2=line(-1/m,x_2,x,y)
    v_1=np.array([x_1,y_1,0]) 
    v_2=np.array([x_2,y_2,0])
    v=np.array([x,y,0])
    n_1=v_1-v #법선 벡터 1 
    n_2=v_2-v #법선 벡터 2
    k, e=distance(x,y,z)
    c=np.array([cur_v[e][0],cur_v[e][1],0])
    cross_1=np.cross(n_1,c)
    cross_2=np.cross(n_2,c)
    
    if cross_1[2]>0: #법선벡터1이랑 폐곡선 벡터랑 외적한 값이 양수면 그린다
        return  x_1, y_1, z
        
    elif cross_2[2]>0:
        return x_2, y_2, z

#---------------폐곡선에서 특정 거리만큼 떨어진 곳의 라인----------------+
def cur_line(x,y,z,s,r): #s 는 폐곡선에서 떨어진 거리 
    e, k=distance(x,y,z)
    i,j=curv(x,y,z,r)
    l_x=[]
    l_y=[]
    if k <= i :
        while k <= i :
            x_1, y_1, z_1 = sam_dis(s,xi[k],yi[k],z)
            k+=1
            l_x.append(x_1)
            l_y.append(y_1)
           
    else : 
        while k <= div-1 :
            x_1, y_1, z_1 = sam_dis(s,xi[k],yi[k],z) 
            k+=1
            l_x.append(x_1)
            l_y.append(y_1)
           
        while k <= i+div :
            x_1, y_1, z_1 = sam_dis(s,xi[k-div],yi[k-div],z) 
            k+=1
            l_x.append(x_1)
            l_y.append(y_1)
          
    r_x=[]
    r_y=[]
    
    e, k=distance(x,y,z)
    if k >= j :    
        while k >= j :
            x_2, y_2, z_2 = sam_dis(s,xi[k],yi[k],z)
            k-=1
            r_x.append(x_2)
            r_y.append(y_2)
          
    else:
        while k >= 0 :
            x_2, y_2, z_2 = sam_dis(s,xi[k],yi[k],z) 
            k-=1
            r_x.append(x_2)
            r_y.append(y_2)
           
        while k >= j-div :
            x_2, y_2, z_2 = sam_dis(s,xi[k+div],yi[k+div],z) 
            k-=1
            r_x.append(x_2)
            r_y.append(y_2)
        
    r_x.reverse()
    r_y.reverse()
    del r_x[-1]
    del r_y[-1]
    list_x=[]
    list_y=[]
    list_x=r_x+l_x
    list_y=r_y+l_y
    array_x=np.array(list_x)
    array_y=np.array(list_y)
    return array_x, array_y
    
#---------------2차원 곡면 극판-----------------------------------------+
def pan_2(x, y, z, s, d, r):
    '''x,y 는 폐곡선 위의 찍은 점의 좌표, s는 찍은 점부터 극판 까지의 거리
    d 는 극판 두께, r은 극판 반지름 '''
    us=d + s # 점부터 극판 위쪽까지의 거리
    list_dx, list_dy = cur_line(x,y,z,s,r)
    list_ux, list_uy = cur_line(x,y,z,us,r)
    return list_dx, list_dy, list_ux, list_uy

def pan_2m(x, y, z, r):
    ''' 3d 를 위해서 함수를 두개로 나눔. 판 위에서의 라인을 리스트로 뽑아내는것 '''
    i,j=curv(x,y,z,r)
    list_mx, list_my = cur_line(x,y,z,0,r)
    return list_mx, list_my

#----------z축 curv 함수------------------------------------------------+
def curv_z(x,y,z,a): # curv 함수와 비슷한 논리 로 짬 
    length_u=0
    length_d=0
    i_z, i=distance(x,y,z)
    j_z, j=distance(x,y,z)
    while length_u < a: # 길이 a 만큼 위로 떨어진 곳의 좌표  
        if i_z < div_z-1:
            length_u+=abs((zi[i_z+1]-zi[i_z]))
            i_z+=1
        
        else : #만약 z가 범위를 벗어나면 와일 구문이 무한 루프를 돔. 그래서 껴넌것 
            break
    
    while length_d < a: # 길이 a 만큼 아래로 떨어진 곳의 좌표 
        if j_z > 0:
            length_d+=abs((zi[j_z]-zi[j_z-1]))
            j_z-=1
            
        else: 
            break
    return i_z-1 ,j_z+1 #마지막 루프에서 한번씩 더 빠지고 더해지므로 그것을 보정한 것   

#------------3차원 곡면 극판--------------------------------------------+
def pan_3d(x,y,z,s,d,a): #s 는 찍은 점부터 극판까지의 거리, d는 극판의 두께, a는 극판 반지름 
    o_z, o =distance(x,y,z)
    i_z, j_z=curv_z(x,y,z,a)
    i=0
    list_mx_sur=[] # 폐곡선 위의 선들의 리스트 
    list_my_sur=[]
    list_dx_sur=[] # 아래쪽 극판 선들의 리스트
    list_dy_sur=[]
    list_ux_sur=[] # 위쪽 극판 선들의 리스트
    list_uy_sur=[]
    list_z=[]
    while o_z+i<= i_z:
        h_1=zi[o_z+i]-zi[o_z]
        r_u=abs((a**2-h_1**2))**0.5 #높이랑 반지름 이용해서 극판의 길이부분 구함 
        list_dx, list_dy, list_ux, list_uy = pan_2(x,y,zi[o_z+i],s,d,r_u)
        list_dx_sur.append(list_dx)
        list_dy_sur.append(list_dy)
        list_ux_sur.append(list_ux)
        list_uy_sur.append(list_uy)
        list_z.append([zi[o_z+i]])
        
        mi, mj = curv(x,y,zi[o_z+i],r_u)
        mx_list, my_list= pick_sur(mi, mj)  
        list_mx_sur.append(mx_list)
        list_my_sur.append(my_list)
        
        i+=1
        
    list_dx_sur.reverse()
    list_dy_sur.reverse()
    list_ux_sur.reverse()
    list_uy_sur.reverse()
    list_z.reverse()
    list_mx_sur.reverse()
    list_my_sur.reverse()
    
    j=-1
    while o_z+j>= j_z :
        h_2=zi[o_z]-zi[o_z+j]
        r_d=abs((a**2-h_2**2))**0.5
        list_dx, list_dy, list_ux, list_uy = pan_2(x,y,zi[o_z+j],s,d,r_d)
        list_dx_sur.append(list_dx)
        list_dy_sur.append(list_dy)
        list_ux_sur.append(list_ux)
        list_uy_sur.append(list_uy)
        list_z.append([zi[o_z+j]])
        
        mi, mj = curv(x,y,zi[o_z+j],r_d)
        mx_list, my_list= pick_sur(mi, mj)  
        list_mx_sur.append(mx_list)
        list_my_sur.append(my_list)
        
        j-=1
              
    z_grid=np.array(list_z)
    dx_grid, dy_grid = fit(list_dx_sur, list_dy_sur)
    ux_grid, uy_grid = fit(list_ux_sur, list_uy_sur)
    mx_grid, my_grid = fit(list_mx_sur, list_my_sur)
    
    ax.plot_surface(dx_grid, dy_grid, z_grid, color='r', alpha=1)
    ax.plot_surface(ux_grid, uy_grid, z_grid, color='r', alpha=1)
    ax.plot_surface(mx_grid, my_grid, z_grid, color='black', alpha=1)
 
    side_sur(dx_grid, dy_grid, z_grid, ux_grid, uy_grid, 'r')
    side_sur(dx_grid, dy_grid, z_grid, mx_grid, my_grid, 'black')
       
#------- 폐곡면위의 점들 뽑을때----------------------------------+
def pick_sur(i,j):
    if i+1>=j:
        x_list=xi[j:i+1]
        y_list=yi[j:i+1]
    else : #i+1 < j
        x_list1=xi[j:div]
        x_list2=xi[:i+1]
        x_list=x_list1+x_list2
        y_list1=yi[j:div]
        y_list2=yi[:i+1]
        y_list=y_list1+y_list2
    
    return x_list, y_list
    
    
#--------array의 갯수를 맞추기 위한 함수(최댓값으로 맞춘다)--------------------+
def fit(a,b): #a는 여기서 x array list를, b는 y array list를 의미한다
    how_many=[]
    re_a=[]
    re_b=[]
    for i in a:
        how_many.append(len(i))
    many= max(how_many)  # 가장 많은 어레이의 갯수를 찾고, 그 개수에 맞추어 나머지를 인터폴 레이트 함 
    for i in range(len(a)): 
        tck, ui =interpolate.splprep([a[i],b[i]], s=0, per=False)
        #per = 0 이면 폐곡선이 아니라 곡선 형태로 인터폴 레이션 한다. 
        xii,yii=interpolate.splev(np.linspace(0,1,many),tck)
        re_a.append(xii)
        re_b.append(yii)
    grid_a=np.array(re_a)
    grid_b=np.array(re_b)
    return grid_a, grid_b

#---------극판 옆면 만드는 함수------------------------------+
def side_sur(a_1, b_1, c, a_2, b_2, col):
    '''a_1, b_1 은 한쪽 극판의 x 어레이와 y 어레이를 의미한다. 
    어레이에서 각각 추출하여 세로운 어레이를 만드는 것
    근데 생각해보니깐 z 어레이도 2개 만들어야 할것 같은데...'''
   
    a1_list=pick_side(a_1)
    a2_list=pick_side(a_2)
    a_list=[]
    a_list.append(a1_list)
    a_list.append(a2_list)
    x_grid=np.array(a_list)
    
    b1_list=pick_side(b_1)
    b2_list=pick_side(b_2)
    b_list=[]
    b_list.append(b1_list)
    b_list.append(b2_list)
    y_grid=np.array(b_list)
        
    c_list=pick_side(c)
    c_list_d=[]
    c_list_d.append(c_list)
    c_list_d.append(c_list)
    z_grid=np.array(c_list_d)
    
    ax.plot_surface(x_grid, y_grid, z_grid, color=col, alpha=1)
    
def pick_side(a) : #각 어레이의 첫점과 끝점을 추출하여, 극판 부분의 둘레의 좌표를 빼내는 거다
    a_list1=[]
    a_list2=[]
    for i in range(len(a)):
        a_list1.append(a[i][0])
        a_list2.append(a[i][-1])
    a_list2.reverse()
    a_list=a_list1+a_list2
    a_list.append(a[0][0])
    return a_list
    
#--------------------MAIN--------------------------------------------+    
##----------- 따블 클릭할 때 ---------------------------------------+
def onclick(event):
    if event.dblclick:
        p=ax.format_coord(event.xdata,event.ydata) 
        #matplotlib 내장함수. 클릭 위치의 좌표 string으로 추출 
        print(p)         
        kx,ky,kz=cor(p)
        ax.scatter(kx, ky, kz, color='green')
        if event.button==3: #우클릭시 
            pan_3d(kx,ky,kz,s,d,a)
        elif event.button==1: #좌클릭시 
            pan(kx,ky,s,d,a)
        plt.show()
        
cid = fig.canvas.mpl_connect('button_press_event', onclick)

#-------------------------------------------------------------------------